#최대 힙(Max Heap)을 구현하는 방법 중 하나, heapq 모듈을 활용해 음수값을 이용해 최대 힙을 표현함..
#최소를 뽑는게 heapq지만, 최대값을 뽑아내고 싶을 때 사용!!

# 첫째줄에 연산의 개수 n이 주어진다.
# 그 이후에 연산 정보 x가 자연수로 주어지면 배열에 자연수 x를 넣는다.

# x가 0이면 배열에서 가장 큰 값을 출력하고, 그 값을 배열에서 제거한다.
# 배열에 값이 없으면 0을 출력한다.

# 프로그램은 처음에 비어있는 배열에서 시작하게 된다.

import sys
import heapq
N = int(sys.stdin.readline())
arr = []
for _ in range(N):
    X = int(sys.stdin.readline())
    if X == 0:
        if len(arr) == 0: #입력받은 값이 0인데, 배열이 비어있으면 0을 출력
            print(0)
        else:
            print(-heapq.heappop(arr))
            # heapq 모듈의 heappop 함수를 사용하여 배열 arr에서 최소값(음수로 표현된 최대값)을 꺼냅니다. 
            # heappop은 힙에서 최소값을 제거하고 반환하는 함수이므로, 여기서는 최대값에 해당하는 음수가 반환됩니다.
            # 반환된 최소값(음수)에 대해 다시 음수를 취하여 원래의 양수로 변환합니다. 
            # 이 작업을 통해 최대 힙(Max Heap)에서의 최대값을 얻을 수 있습니다.
    else:
        # 배열에 값 넣기
        heapq.heappush(arr, -X)
        #음수값으로 값을 추가함으로써, 최소 힙의 특성을 유지하면서 최대 힙을 표현함..
        

#일반적 힙 자료구조는 최소힙을 기본으로 하며, 부모노드의 값이 항상 자식 노드의 값보다 작다는 특성
#최대 힙을 구현하려면 부모노드의 값이 자식노드의 값보다 크도록 만들어야 한다
#heapq는 최소 힙을 지원하므로, 최대 힙을 표현하려면 값에 음수를 취해서 음수로 변환하고 저장해야 한다.
#이를 통해 최소 힙의 특성을 유지하면서 사실상 최대 힙의 동작을 얻을 수 있다!!
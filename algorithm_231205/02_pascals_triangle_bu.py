#파스칼의 삼각형을 생성하는 클래스 Solution을 정의하고 주어진 행 수에 해당하는 파스칼의 삼각형을 이중 리스트로 반환
#바텀업 방식

class Solution:
    def generate(self, numRows: int) -> list[list[int]]:
        # list[list[int]]는 이중 리스트를 나타냄
        #첫번째 리스트는 각 행, 두번째 리스트는 각 행의 원소
        #예) generate(3) => [[1],[1,1],[1,2,1]]
        
        dp_table = [[0]*(i+1) for i in range(numRows)]
        #for i in range(numRows): numRows가 주어진 파스칼 삼각형의 행 수를 타나냄
        #이 범위에 따라 각행을 나타내는 리스트를 생성
        
        #[[0]*(i+1) for i in range(numRows)]: 이중 리스트 컴프리헨션을 사용하여 dp_table을 초기화
        #각 행은 현재 행번호 i에 1을 더한 길이를 가지며, 모든 원소는 0으로 초기화
        #즉, 모든 원소가 0으로 초기화된 이중 리스트
        
        for i in range(len(dp_table)): #각 행에 대해 반복
            dp_table[i][0] = 1
            dp_table[i][-1] = 1
            #각 행의 양 끝 값을 1로 초기화
        
        #파스칼의 삼각형을 생성, 이미 초기화된 dp_table을 이용하여 삼각형 채워나감
        for i in range(2, numRows):
            #첫 번째 행(인덱스 0)과 두 번째 행(인덱스 1)은 이미 초기화되어 있으므로, 세 번째 행부터 마지막 행까지 반복합니다. 
            for j in range(1, i): 
                #각 행의 첫 번째 값과 마지막 값은 이미 초기화되어 있으므로, 두 번째 값부터 해당 행의 마지막 값까지 반복합니다.
                dp_table[i][j] = dp_table[i-1][j-1] + dp_table[i-1][j]
                #dp_table[i-1][j-1]: 현재 위치의 왼쪽 값
                #dp_table[i-1][j]: 현재 위치의 위쪽 값
        return dp_table


sol = Solution()
print(sol.generate(5))
#5개의 행으로 이루어진 파스칼의 삼각형을 계산하고 출력하는 부분이며, 결과로 이중 리스트가 출력됩니다. 
# 이중 리스트의 각 행은 파스칼의 삼각형의 해당 행을 나타내며, 각 원소는 해당 위치의 값입니다.

#파스칼의 삼각형에서 각 수는 자신의 위 왼쪽과 위 오른쪽의 수의 합으로 계산되며, 삼각형의 양 끝은 항상 1입니다. 
# 이 삼각형은 이항 계수를 나타내기 위해 사용되며, 이항 계수는 조합론에서 사용되는 개념 중 하나입니다.
# 동적 계획법과 관련된 알고리즘에서도 종종 활용됩니다.